{"version":3,"sources":["App/variables.ts","App/components/Content/components/JournalList/components/Journal/Journal.tsx","App/components/Content/components/JournalList/JournalList.tsx","App/components/Content/Content.tsx","App/components/Footer/Footer.tsx","App/App.tsx","serviceWorker.ts","index.tsx"],"names":["COLOR","1","2","3","4","5","6","7","8","9","10","Entry","styled","div","height","concat","boxShadow","flex",":first-of-type","borderTopLeftRadius","borderBottomLeftRadius",":last-child","borderTopRightRadius","borderBottomRightRadius","EntryList","paddingTop","display","flexDirection","justifyContent","alignItems","Journal","react_default","a","createElement","HeaderBackground","borderBottom","backgroundColor","Padding","padding",">*","paddingBottom","JournalList","components_Journal_Journal","Content","_ref","className","components_JournalList_JournalList","Background","borderTop","Footer","FOOTER_HEIGHT","FixedHeightContent","FixedHeightFooter","App","Fragment","core_browser_esm","styles","body","margin","fontFamily","WebkitFontSmoothing","MozOsxFontSmoothing","lib_default","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_App","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.d1c8eced.chunk.js","sourcesContent":["export const BASE_SIZING_UNIT = 8\n\nexport const COLOR = {\n  // taken from https://ant.design/docs/spec/colors\n  GREY: {\n    1: \"#ffffff\",\n    2: \"#fafafa\",\n    3: \"#f5f5f5\",\n    4: \"#e8e8e8\",\n    5: \"#d9d9d9\",\n    6: \"#bfbfbf\",\n    7: \"#8c8c8c\",\n    8: \"#595959\",\n    9: \"#262626\",\n    10: \"#000000\",\n  },\n}\n","import React from \"react\"\nimport styled from \"@emotion/styled\"\nimport { COLOR, BASE_SIZING_UNIT } from \"../../../../../../variables\"\n\nconst Entry = styled.div({\n  height: `${3 * BASE_SIZING_UNIT}px`,\n  boxShadow: \"inset 0 0 1px #000000\",\n  flex: 1,\n  \":first-of-type\": {\n    borderTopLeftRadius: \"4px\",\n    borderBottomLeftRadius: \"4px\",\n  },\n  \":last-child\": {\n    borderTopRightRadius: \"4px\",\n    borderBottomRightRadius: \"4px\",\n  },\n})\n\nconst EntryList = styled.div({\n  paddingTop: `${1 * BASE_SIZING_UNIT}px`,\n  display: \"flex\",\n  flexDirection: \"row\",\n  justifyContent: \"space-between\",\n  alignItems: \"center\",\n})\n\nconst Journal = () => (\n  <div>\n    <span>Create OSS PR</span>\n    <EntryList>\n      <Entry />\n      <Entry />\n      <Entry />\n      <Entry />\n      <Entry />\n      <Entry />\n      <Entry />\n    </EntryList>\n  </div>\n)\n\nexport default Journal\n","import React from \"react\"\nimport styled from \"@emotion/styled\"\nimport Journal from \"./components/Journal/Journal\"\nimport { COLOR, BASE_SIZING_UNIT } from \"../../../../variables\"\n\nconst FAKE_JOURNAL_DATA = [\n  {\n    id: 1,\n    name: \"My Journal\",\n  },\n]\n\nconst HeaderBackground = styled.div({\n  borderBottom: `1px solid ${COLOR.GREY[4]}`,\n  backgroundColor: COLOR.GREY[2],\n  height: `${6 * BASE_SIZING_UNIT}px`,\n  display: \"flex\",\n  flexDirection: \"row\",\n  justifyContent: \"space-between\",\n  alignItems: \"center\",\n})\n\nconst Padding = styled.div({\n  padding: `${1 * BASE_SIZING_UNIT}px`,\n  \">*\": {\n    paddingBottom: `${3 * BASE_SIZING_UNIT}px`,\n  },\n})\n\nconst JournalList = () => (\n  <div>\n    <HeaderBackground>\n      <button>Edit</button>\n      <button>Add</button>\n    </HeaderBackground>\n    <Padding>\n      <Journal />\n      <Journal />\n      <Journal />\n    </Padding>\n  </div>\n)\n\nexport default JournalList\n","import React from \"react\"\nimport JournalList from \"./components/JournalList/JournalList\"\n\ninterface Props {\n  className?: string\n}\n\nconst Content = ({ className }: Props) => (\n  <div className={className}>\n    <JournalList />\n  </div>\n)\n\nexport default Content\n","import React from \"react\"\nimport styled from \"@emotion/styled\"\nimport { COLOR } from \"../../variables\"\n\ninterface Props {\n  className?: string\n}\n\nconst Background = styled.div({\n  borderTop: `1px solid ${COLOR.GREY[4]}`,\n  backgroundColor: COLOR.GREY[2],\n  display: \"flex\",\n  flexDirection: \"row\",\n  justifyContent: \"space-between\",\n  alignItems: \"center\",\n})\n\nconst Footer = ({ className }: Props) => (\n  <Background className={className}>\n    <button>Journals</button>\n  </Background>\n)\n\nexport default Footer\n","import React from \"react\"\nimport Content from \"./components/Content/Content\"\nimport Footer from \"./components/Footer/Footer\"\nimport { Global } from \"@emotion/core\"\nimport styled from \"@emotion/styled\"\nimport Div100vh from \"react-div-100vh\"\nimport { BASE_SIZING_UNIT } from \"./variables\"\n\nconst FOOTER_HEIGHT = `${6 * BASE_SIZING_UNIT}px`\n\nconst FixedHeightContent = styled(Content)({\n  height: `calc(100% - ${FOOTER_HEIGHT})`,\n})\n\nconst FixedHeightFooter = styled(Footer)({\n  height: FOOTER_HEIGHT,\n})\n\nconst App = () => (\n  <React.Fragment>\n    <Global\n      styles={{\n        body: {\n          margin: 0,\n          padding: 0,\n          fontFamily:\n            \"-apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif\",\n          WebkitFontSmoothing: \"antialiased\",\n          MozOsxFontSmoothing: \"grayscale\",\n        },\n      }}\n    />\n    <Div100vh>\n      <FixedHeightContent />\n      <FixedHeightFooter />\n    </Div100vh>\n  </React.Fragment>\n)\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href,\n    )\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit http://bit.ly/CRA-PWA\",\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See http://bit.ly/CRA-PWA.\",\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\")\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\")\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\"No internet connection found. App is running in offline mode.\")\n    })\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport App from \"./App/App\"\nimport * as serviceWorker from \"./serviceWorker\"\n\nReactDOM.render(<App />, document.getElementById(\"root\"))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register()\n"],"sourceRoot":""}